#include <Servo.h>

// Arduino pin assignment
#define PIN_LED 9
#define PIN_SERVO 10
#define PIN_IR A0

// Framework setting

#define _DIST_TARGET 255
#define _DIST_MIN 100
#define _DIST_MAX 410

// Distance sensor
#define _DIST_ALPHA 0.6 

// Servo range
#define _DUTY_MIN 1100 
#define _DUTY_NEU 1400
#define _DUTY_MAX 1720
#define _ITERM_MAX 50

// Servo speed control
#define _SERVO_ANGLE 30 // angle b/w DUTY_MAX and DUTY_MIN
#define _SERVO_SPEED 10 // servo speed limit (deg/sec)

// Event periods
#define _INTERVAL_DIST 10 // distance sensor interval (ms)
#define _INTERVAL_SERVO 10 // servo interval (ms)
#define _INTERVAL_SERIAL 100 // serial interval (ms)

// PID parameters
#define _KP 0.6
#define _KD 10// proportional gain ****
#define _KI 0.08

// global variables //

// Servo instance
Servo myservo;
int a,b,x;

// Distance sensor
float dist_target=254; // location to send the ball
float dist_raw, dist_ema,dist_raw_prev;
float alpha=0.7;

// Event periods
unsigned long last_sampling_time_dist, last_sampling_time_servo,last_sampling_time_serial; 
bool event_dist,event_servo,event_serial;

// Servo speed control
int duty_chg_per_interval; // maximum duty difference per interval
int duty_target,duty_curr;

// PID variables
float error_curr, error_prev, control, pterm, dterm, iterm;

void setup() {

  duty_chg_per_interval=2;
  last_sampling_time_dist=0;
  last_sampling_time_servo=0;
  last_sampling_time_serial=0;
  event_dist=event_servo=event_serial=false;
  Serial.begin(57600);
  a = 89;
  b = 327;
  
  myservo.attach(PIN_SERVO);
  myservo.write(1426);
  delay(1000);

  
}

void loop() {
  unsigned long time_curr= millis();
  if(time_curr >= last_sampling_time_dist+_INTERVAL_DIST){
    last_sampling_time_dist+=_INTERVAL_DIST;
    event_dist=true;      
  }
  if(time_curr >= last_sampling_time_servo+_INTERVAL_SERVO){
    last_sampling_time_servo+=_INTERVAL_SERVO;
    event_servo=true;
  }
  if(time_curr >= last_sampling_time_serial+_INTERVAL_SERIAL){
    last_sampling_time_serial+=_INTERVAL_SERIAL;
    event_serial=true;
  }

  if(event_dist) {
    dist_raw = ir_distance();
    if(dist_raw_prev!=0){
      if (dist_raw-dist_raw_prev>=6){
         ;
      }
      else if (dist_raw-dist_raw_prev<-6){
        ;
      }
      else{
        float dist_cali = 100 + 300.0 / (b - a) * (dist_raw - a);
        dist_ema = alpha*dist_cali+(1-alpha)*dist_ema;
        dist_raw_prev=dist_raw;}

    }
    else{
      dist_raw_prev=dist_raw;
    }
    dist_raw_prev=dist_raw;

    
  // PID control logic
    error_curr = dist_target - dist_ema;
    pterm = error_curr;
    dterm = error_curr-error_prev;
    if(250<=dist_ema<=260)iterm =0;
    iterm +=_KI*(error_curr);
    control = _KP*(pterm)+_KD*dterm+iterm;
    duty_target=1426+control;
  
    if(abs(iterm)>_ITERM_MAX)iterm =0;
    error_prev=error_curr;
     
    if(duty_target<1100){
      duty_target=1100;
    }
    if(duty_target>1700){
      duty_target=1700;
    }
    event_dist = false;
  }
  
  if(event_servo) {
    /*duty_curr=myservo.read();
    x=duty_target-duty_curr;
    if(x>0){
      for(int i=0;i<=x;i+=2){
        myservo.write(duty_curr+i);
        delay(20);
      }
    }
    else if(x<0){
      for(int i=0;i>=x;i+=2){
        myservo.write(duty_curr+i);
        delay(20);
      }
     }
     event_servo=false;
    }*/
    
    if(duty_target-1426>0){
      for(int i=0;i+1426<=duty_target;i+=2){
        myservo.write(1426+i);

      }
    }
     else if (duty_target-1426<0){

      for(int i=0;1426-i>=duty_target;i+=2){
        myservo.write(1426-i);

      }
     }
      
    }

  if(event_serial){
    event_serial = false;
    Serial.print("dist_ir:");
    Serial.print(dist_raw);
    Serial.print("dist_ema:");
    Serial.print(dist_ema);
    Serial.print(",T:");
    Serial.print(dist_target);
    Serial.print(",pterm:");
    Serial.print(map(pterm,-1000,1000,510,610));
    Serial.print(",D:");
    Serial.print(map(dterm,-1000,1000,510,610));
    Serial.print(",I:");
    Serial.print(map(iterm,-1000,1000,510,610));
    Serial.print(",DTT:");
    Serial.print(map(duty_target,1000,2000,410,510));
    Serial.print(",DTC:");
    Serial.print(map(duty_curr,1000,2000,410,510));
    Serial.println(",-G:245,+G:265,m:0,M:800");

  }
}
float ir_distance(void){ // return value unit: mm
  float val;
  float volt = float(analogRead(PIN_IR));
  val = ((6762.0/(volt-9.0))-4.0) * 10.0;
  return val;
}
